// <auto-generated />
using System;
using Back_end.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Back_end.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Back_end.Model.Cards", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<int>("Endurance")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("LetterLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Back_end.Model.Game", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("GameTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlayerWinner")
                        .HasColumnType("int");

                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("IdRoom")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Back_end.Model.Player", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IdGame")
                        .HasColumnType("int");

                    b.Property<string>("NamePlayer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("IdGame");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Back_end.Model.PlayerCard", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IdCard")
                        .HasColumnType("int");

                    b.Property<int>("IdPlayer")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("IdCard");

                    b.HasIndex("IdPlayer");

                    b.ToTable("PlayerCards");
                });

            modelBuilder.Entity("Back_end.Model.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("NumPlayers")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Back_end.Model.Round", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdGame")
                        .HasColumnType("int");

                    b.Property<int>("IdPlayerWinner")
                        .HasColumnType("int");

                    b.Property<int>("NumRound")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("IdGame");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("Back_end.Model.Turn", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("IdPlayer")
                        .HasColumnType("int");

                    b.Property<int>("IdRound")
                        .HasColumnType("int");

                    b.Property<string>("ValueAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("IdPlayer");

                    b.HasIndex("IdRound");

                    b.ToTable("Turn");
                });

            modelBuilder.Entity("Back_end.Model.Game", b =>
                {
                    b.HasOne("Back_end.Model.Room", "Room")
                        .WithOne("Game")
                        .HasForeignKey("Back_end.Model.Game", "IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Back_end.Model.Player", b =>
                {
                    b.HasOne("Back_end.Model.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("IdGame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Back_end.Model.PlayerCard", b =>
                {
                    b.HasOne("Back_end.Model.Cards", "Card")
                        .WithMany("PlayerCards")
                        .HasForeignKey("IdCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back_end.Model.Player", "Player")
                        .WithMany("PlayerCards")
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Back_end.Model.Round", b =>
                {
                    b.HasOne("Back_end.Model.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("IdGame")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Back_end.Model.Turn", b =>
                {
                    b.HasOne("Back_end.Model.Player", "Player")
                        .WithMany("Turn")
                        .HasForeignKey("IdPlayer")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Back_end.Model.Round", "Round")
                        .WithMany("Turn")
                        .HasForeignKey("IdRound")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Back_end.Model.Cards", b =>
                {
                    b.Navigation("PlayerCards");
                });

            modelBuilder.Entity("Back_end.Model.Game", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Back_end.Model.Player", b =>
                {
                    b.Navigation("PlayerCards");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Back_end.Model.Room", b =>
                {
                    b.Navigation("Game")
                        .IsRequired();
                });

            modelBuilder.Entity("Back_end.Model.Round", b =>
                {
                    b.Navigation("Turn");
                });
#pragma warning restore 612, 618
        }
    }
}
